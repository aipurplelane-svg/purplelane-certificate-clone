import { NextRequest } from "next/server";
import { sign, verify as verifyToken, requireOrDevBypass } from "@/lib/server/tokens";
import PDFDocument from "pdfkit";

export const runtime = "nodejs";

export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url);
  const certId = searchParams.get("cert_id") || "";
  const tokenProvided = searchParams.get("sig") !== null && searchParams.get("exp") !== null;

  if (!certId) {
    return new Response(JSON.stringify({ error: "missing cert_id" }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    });
  }

  let allowed = false;
  if (tokenProvided) {
    const result = verifyToken(searchParams);
    allowed = result.ok;
  }
  if (!allowed) {
    allowed = requireOrDevBypass(false);
  }
  if (!allowed) {
    return new Response(JSON.stringify({ error: "unauthorized" }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    });
  }

  try {
    // Generate a simple PDF with pdf-lib for compatibility across runtimes
    const pdfLib = await import("pdf-lib");
    const { PDFDocument, StandardFonts, rgb } = pdfLib;

    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([595.28, 841.89]); // A4 size in points
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const { width, height } = page.getSize();

    page.drawText("PurpleLane Certificate", {
      x: 50,
      y: height - 100,
      size: 24,
      font,
      color: rgb(0.07, 0.07, 0.07),
    });
    page.drawText(`Certificate ID: ${certId}`, {
      x: 50,
      y: height - 140,
      size: 16,
      font,
      color: rgb(0.07, 0.07, 0.07),
    });
    page.drawText(
      "This is a demo PDF generated by the /api/download route. Replace with real HTML->PDF pipeline.",
      {
        x: 50,
        y: height - 180,
        size: 12,
        font,
        color: rgb(0.2, 0.2, 0.2),
        maxWidth: width - 100,
      }
    );

    const pdfBytes = await pdfDoc.save();
    const buffer = Buffer.from(pdfBytes);

    const filename = `certificate-${certId}.pdf`;
    return new Response(buffer, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${filename}"`,
        "Cache-Control": "private, max-age=0, must-revalidate",
      },
    });
  } catch (err) {
    return new Response(
      JSON.stringify({ error: "pdf_generation_failed", details: (err as Error)?.message || String(err) }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}